/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospital_management;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arunb
 */
public class DoctorDetail extends javax.swing.JFrame {

    /**
     * Creates new form DoctorDetail
     */
    public DoctorDetail() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new java.awt.Panel();
        jTextField1 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jRadioButton1.setText("emp name");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(153, 0, 153));
        jButton3.setText("SEARCH");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("emp id");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jRadioButton1))
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jRadioButton2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jButton3)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(22, 22, 22))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "pid", "name", "gender", "dob", "email"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Patient detail");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 356, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
         String hg=jTextField1.getText();
         if(hg.equals(""))
         {
             JOptionPane.showMessageDialog(this,"Please Search a valid data value");
         }
         else{
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        try {
            Class.forName("java.sql.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbmsprojects", "root", "root");
            Statement stmt = conn.createStatement();
            String str, query, query1, query2, query3;
            ResultSet rs, rs1, rs2, rs3, rs4;
            int eid, i , j;
            if (jRadioButton1.isSelected() == true) {
                str = jTextField1.getText();
                query = "Select empid from employee where fname like \"%" + str + "%\";";
                rs = stmt.executeQuery(query);
                int deptid = 0, k = 0;
                int empidf[] = new int[100];
                if (rs.next()) {
                    rs.previous();
                    i=0;
                    while (rs.next()) {
                        empidf[k] = rs.getInt(1);
                        k++;
                    }
                    for (int x = 0; x < k; x++) {
                        eid = empidf[x];
                        query = "SELECT empid,CONCAT(fname,\" \", mname,\" \", lname),"
                                + "gender,CONCAT(Hno,\" \",Street,\" \", City,\" \",State),emptype,date_of_joining,email,deptid FROM employee WHERE empid=" + eid + ";";
                        rs4 = stmt.executeQuery(query);
                        String etype = "DOCTOR";
                        if (rs4.next()) {
                            model.addRow(new Object[]{"" + rs4.getInt(1), rs4.getString(2), rs4.getString(3), rs4.getString(4), rs4.getString(5),
                                rs4.getString(6), rs4.getString(7)});
                            deptid = rs4.getInt(8);
                            etype = "" + rs4.getString(5);
                        }
                        rs4.close();

                        query = "Select dname from department where deptid=" + deptid + ";";
                        rs2 = stmt.executeQuery(query);

                        if (rs2.next()) {
                            model.setValueAt(rs2.getString(1), model.getRowCount() - 1, 7);
                        }
                        rs2.close();
                        query = "Select salary from salary where etype=\"" + etype + "\";";
                        rs3 = stmt.executeQuery(query);
                        if (rs3.next()) {
                            model.setValueAt(rs3.getFloat(1), model.getRowCount() - 1, 8);
                        }
                        
                    }
                } 
                else
                {
                    i=10;
                }
                 query = "Select empid from employee_inactive where fname like \"%" + str + "%\";";
                  System.out.println(""+query);
                    rs1 = stmt.executeQuery(query);
                if(rs1.next()) {
                   rs1.previous();
                   j=0;
                    while (rs1.next()) {
                        empidf[k] = rs1.getInt(1);
                        k++;
                    }
                    for (int x = 0; x < k; x++) {
                        eid = empidf[x];
                        query = "SELECT empid,CONCAT(fname,\" \", mname,\" \",lname),gender,"
                                + "CONCAT(Hno,\" \", Street, \" \",City,\" \", State),emptype,date_of_joining,email FROM employee_inactive WHERE empid=" + eid + ";";
                        rs4 = stmt.executeQuery(query);
                        String etype = "DOCTOR";
                        if (rs4.next()) {
                            model.addRow(new Object[]{"" + rs4.getInt(1), rs4.getString(2), rs4.getString(3), rs4.getString(4), rs4.getString(5),
                                rs4.getString(6), rs4.getString(7),"NULL"});
                            etype = rs4.getString(5);
                        }
                        query = "Select salary from salary where etype=\"" + etype + "\";";
                        rs3 = stmt.executeQuery(query);
                       
           
                        if (rs3.next()) {
                            System.out.println(""+rs3.getFloat(1));
                            model.setValueAt(rs3.getFloat(1), model.getRowCount() - 1, 8);
                        }
                    }
                }
                else
                {
                    j=10;
                }
              if(i==10 && j==10)
              {
                  i=j=0;
                  JOptionPane.showMessageDialog(null,"Record Not Found!");
              }
            } else if (jRadioButton2.isSelected() == true) {
                eid = Integer.parseInt(jTextField1.getText());
                query = "Select empid from employee where empid=" + eid + ";";
                rs = stmt.executeQuery(query);
                int deptid = 0;
                if (rs.next()) {
                    i=0;
                    query = "SELECT empid,CONCAT(fname,\" \", mname,\" \", lname),"
                            + "gender,CONCAT(Hno,\" \", Street,\" \", City,\" \", State),emptype,date_of_joining,email,deptid FROM employee WHERE empid=" + eid + ";";
                    rs = stmt.executeQuery(query);
                    String etype = "DOCTOR";
                    if (rs.next()) {
                        System.out.println("" + rs.getString(2));
                        model.addRow(new Object[]{"" + rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                            rs.getString(6), rs.getString(7)});
                        deptid = rs.getInt(8);
                        etype = "" + rs.getString(5);
                    }
                    rs.close();
                    query1 = "Select phoneno from emp_phone where empid=" + eid + ";";
                    rs1 = stmt.executeQuery(query1);

                    if (rs1.next()) {
                        jTextField1.setText("" + rs1.getString(1));
                    }
                    if (rs1.next()) {
                        jTextField1.setText("" + rs1.getString(1));
                    }
                    rs1.close();

                    query = "Select dname from department where deptid=" + deptid + ";";
                    rs2 = stmt.executeQuery(query);
                    if (rs2.next()) {
                        model.setValueAt(rs2.getString(1), model.getRowCount() - 1, 7);
                    }
                    rs2.close();
                    query = "Select salary from salary where etype=\"" + etype + "\";";
                    rs3 = stmt.executeQuery(query);
                    if (rs3.next()) {
                        model.setValueAt(rs3.getFloat(1), model.getRowCount() - 1, 8);
                    }
                       rs.close();
                       rs1.close();
                       rs3.close();
                       rs2.close();
                }
                else
                {
                    i=10;
                }
                query = "Select empid from employee_inactive where empid=" + eid + ";";
                 System.out.println("" +eid);
                rs1 = stmt.executeQuery(query);
                if (rs1.next()) {
                    j=0;
                    rs1.close();
                    query = "SELECT empid,CONCAT(fname, mname, lname),gender,"
                            + "CONCAT(Hno, Street, City, State),emptype,date_of_joining,email FROM employee_inactive WHERE empid=" + eid + ";";
                    rs = stmt.executeQuery(query);
                    String etype = "DOCTOR";
                    if (rs.next()) {
                        System.out.println("" + rs.getString(2));
                        model.addRow(new Object[]{"" + rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5),
                            rs.getString(6), rs.getString(7),"NULL"});
                        etype =""+rs.getString(5);
                    }
                    rs.close();
                    query1 = "Select phoneno from emp_phone where empid=" + eid + ";";
                    rs1 = stmt.executeQuery(query1);
                    if (rs1.next()) {
                        jTextField1.setText("" + rs1.getString(1));
                    }
                    if (rs1.next()) {
                        jTextField1.setText("" + rs1.getString(1));
                    }
                    query = "Select salary from salary where etype=\"" + etype+ "\";";
                    rs3 = stmt.executeQuery(query);
                    if (rs3.next()) {
                        model.setValueAt(rs3.getFloat(1), model.getRowCount() - 1, 8);
                    }
                }else
                {
                    j=10;
                }
                           if(i==10 && j==10)
                           {
                               i=j=0;
                  JOptionPane.showMessageDialog(null,"Record Not Found!");
                           }
                               
            }

            stmt.close();
            conn.close();
jTextField1.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        } 
         }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DoctorDetail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables
}
